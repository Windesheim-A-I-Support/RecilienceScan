# PART 4 - DATA VALIDATION: Comprehensive Data Quality Engineering

```{r data-discovery-and-loading, eval=params$data_guide_mode, echo=FALSE, results='asis'}
# ========================================================================
# DATA DISCOVERY & FILE ANALYSIS
# ========================================================================

cat("# Validation Debug Summary\n\n")
cat("*This detailed analysis is shown because data guide mode is enabled.*\n\n")

# Initialize validation tracking
validation_results <- list(
  rows_checked = 0,
  errors = 0,
  warnings = 0,
  info_messages = 0,
  detailed_messages = list()
)

# Add validation message function
add_validation_message <- function(row_idx = NA, field = "", rule = "", value = "", severity = "info", message = "") {
  validation_results$detailed_messages <<- append(validation_results$detailed_messages, list(list(
    row = ifelse(is.na(row_idx), "N/A", row_idx),
    field = field,
    rule = rule, 
    value = as.character(value),
    severity = severity,
    message = message
  )))
  
  if (severity == "error") validation_results$errors <<- validation_results$errors + 1
  else if (severity == "warning") validation_results$warnings <<- validation_results$warnings + 1
  else validation_results$info_messages <<- validation_results$info_messages + 1
}

cat("## Data Discovery & File Analysis\n\n")

# Define data file path
data_file_path <- "data/cleaned_master.csv"

# File existence and accessibility check
tryCatch({
  cat("**File System Analysis:**\n")
  
  # Check data directory
  if (!dir.exists("data")) {
    add_validation_message(field = "filesystem", rule = "directory_exists", value = "data/", 
                          severity = "error", message = "Data directory does not exist")
    cat("- Data directory: **NOT FOUND** ❌\n")
  } else {
    cat("- Data directory: Found ✅\n")
    
    # List available files in data directory
    available_files <- list.files("data", pattern = "\\.(csv|xlsx|xls|txt)$", ignore.case = TRUE)
    cat("- Available data files:", length(available_files), "\n")
    if (length(available_files) > 0) {
      cat("  - Files:", paste(head(available_files, 10), collapse = ", "), 
          if(length(available_files) > 10) "..." else "", "\n")
    }
  }
  
  # Target file analysis
  if (file.exists(data_file_path)) {
    file_info <- file.info(data_file_path)
    cat("- Target file: **FOUND** ✅\n")
    cat("  - Path:", data_file_path, "\n")
    cat("  - Size:", round(file_info$size / 1024, 1), "KB\n")
    cat("  - Modified:", as.character(file_info$mtime), "\n")
    
    # Check file permissions
    if (file.access(data_file_path, 4) == 0) {
      cat("  - Readable: Yes ✅\n")
    } else {
      add_validation_message(field = "file_access", rule = "readable", value = data_file_path,
                            severity = "error", message = "File exists but not readable")
      cat("  - Readable: **NO** ❌\n")
    }
    
  } else {
    add_validation_message(field = "file_existence", rule = "file_exists", value = data_file_path,
                          severity = "error", message = "Target CSV file not found")
    cat("- Target file: **NOT FOUND** ❌\n")
  }
  
}, error = function(e) {
  add_validation_message(field = "filesystem", rule = "access_check", value = "",
                        severity = "error", message = paste("File system error:", e$message))
  cat("- File system error:", e$message, "\n")
})

cat("\n")
```

```{r data-loading-and-preview, eval=params$data_guide_mode, echo=FALSE, results='asis'}
# ========================================================================
# ROBUST DATA LOADING WITH MULTIPLE STRATEGIES
# ========================================================================

cat("## Data Loading & Structure Analysis\n\n")

df_raw <- NULL
loading_method <- "none"

# Multiple loading strategies with fallbacks
tryCatch({
  cat("**Loading Strategy Testing:**\n")
  
  if (file.exists(data_file_path)) {
    
    # Strategy 1: readr with UTF-8
    if ("readr" %in% loaded_packages && is.null(df_raw)) {
      tryCatch({
        df_raw <- readr::read_csv(data_file_path, 
                                 col_types = readr::cols(.default = "c"),
                                 show_col_types = FALSE,
                                 locale = readr::locale(encoding = "UTF-8"))
        loading_method <- "readr_utf8"
        cat("- Strategy 1 (readr UTF-8): **SUCCESS** ✅\n")
      }, error = function(e) {
        cat("- Strategy 1 (readr UTF-8): Failed -", e$message, "\n")
      })
    }
    
    # Strategy 2: readr with auto-detect encoding
    if ("readr" %in% loaded_packages && is.null(df_raw)) {
      tryCatch({
        df_raw <- readr::read_csv(data_file_path,
                                 col_types = readr::cols(.default = "c"),
                                 show_col_types = FALSE)
        loading_method <- "readr_auto"
        cat("- Strategy 2 (readr auto): **SUCCESS** ✅\n")
      }, error = function(e) {
        cat("- Strategy 2 (readr auto): Failed -", e$message, "\n")
      })
    }
    
    # Strategy 3: Base R with UTF-8
    if (is.null(df_raw)) {
      tryCatch({
        df_raw <- read.csv(data_file_path, 
                          stringsAsFactors = FALSE,
                          encoding = "UTF-8",
                          check.names = FALSE)
        loading_method <- "base_utf8"
        cat("- Strategy 3 (base R UTF-8): **SUCCESS** ✅\n")
      }, error = function(e) {
        cat("- Strategy 3 (base R UTF-8): Failed -", e$message, "\n")
      })
    }
    
    # Strategy 4: Base R minimal
    if (is.null(df_raw)) {
      tryCatch({
        df_raw <- read.csv(data_file_path, stringsAsFactors = FALSE)
        loading_method <- "base_minimal"
        cat("- Strategy 4 (base R minimal): **SUCCESS** ✅\n")
      }, error = function(e) {
        cat("- Strategy 4 (base R minimal): Failed -", e$message, "\n")
      })
    }
    
  } else {
    cat("- **File not found - cannot attempt loading**\n")
  }
  
}, error = function(e) {
  add_validation_message(field = "data_loading", rule = "load_csv", value = "",
                        severity = "error", message = paste("All loading strategies failed:", e$message))
})

# Data loading results
if (!is.null(df_raw)) {
  validation_results$rows_checked <- nrow(df_raw)
  
  cat("\n**Data Loading Results:**\n")
  cat("- **Loading method used:** ", loading_method, "\n")
  cat("- **Rows loaded:** ", nrow(df_raw), "\n")
  cat("- **Columns loaded:** ", ncol(df_raw), "\n")
  
  # Basic data validation
  if (nrow(df_raw) == 0) {
    add_validation_message(field = "data_content", rule = "min_rows > 0", value = "0",
                          severity = "error", message = "Dataset contains no rows")
    cat("- **Data content:** Empty dataset ❌\n")
  } else if (nrow(df_raw) < 5) {
    add_validation_message(field = "data_content", rule = "min_rows >= 5", value = nrow(df_raw),
                          severity = "warning", message = "Very small dataset may limit analysis")
    cat("- **Data content:** Very small dataset (", nrow(df_raw), " rows) ⚠️\n")
  } else {
    cat("- **Data content:** Adequate size ✅\n")
  }
  
  if (ncol(df_raw) == 0) {
    add_validation_message(field = "data_structure", rule = "min_cols > 0", value = "0",
                          severity = "error", message = "Dataset contains no columns")
    cat("- **Data structure:** No columns ❌\n")
  } else {
    cat("- **Data structure:** ", ncol(df_raw), " columns available ✅\n")
  }
  
} else {
  add_validation_message(field = "data_loading", rule = "load_success", value = "failed",
                        severity = "error", message = "All loading strategies failed - no data available")
  cat("\n**⚠️ Data loading failed - no data available for analysis**\n")
}

cat("\n")
```

```{r data-preview-and-structure, eval=params$data_guide_mode, echo=FALSE, results='asis'}
# ========================================================================
# DATA PREVIEW & STRUCTURE ANALYSIS
# ========================================================================

if (!is.null(df_raw) && nrow(df_raw) > 0) {
  cat("## Raw Data Preview & Structure\n\n")
  
  tryCatch({
    # Clean column names for analysis
    original_colnames <- colnames(df_raw)
    clean_colnames <- tolower(trimws(original_colnames))
    
    # Show raw data preview
    cat("**First 5 rows of raw data:**\n\n")
    
    if ("knitr" %in% loaded_packages) {
      preview_data <- head(df_raw, 5)
      # Truncate long values for display
      preview_data[] <- lapply(preview_data, function(x) {
        ifelse(nchar(as.character(x)) > 30, 
               paste0(substr(as.character(x), 1, 27), "..."), 
               as.character(x))
      })
      print(knitr::kable(preview_data, format = "markdown"))
    } else {
      print(head(df_raw, 5))
    }
    
    cat("\n**Column Structure Analysis:**\n")
    cat("- **Total columns:** ", ncol(df_raw), "\n")
    cat("- **Column name consistency:** ", 
        ifelse(any(duplicated(clean_colnames)), "Duplicates found ❌", "No duplicates ✅"), "\n")
    
    # Check for naming issues
    problematic_names <- original_colnames[grepl("[^a-zA-Z0-9_.]", original_colnames)]
    if (length(problematic_names) > 0) {
      add_validation_message(field = "column_names", rule = "valid_characters", 
                            value = paste(problematic_names, collapse = ", "),
                            severity = "warning", message = "Column names contain special characters")
      cat("- **Column name issues:** Special characters found in", length(problematic_names), "columns ⚠️\n")
    } else {
      cat("- **Column name format:** Clean format ✅\n")
    }
    
  }, error = function(e) {
    add_validation_message(field = "data_preview", rule = "preview_generation", value = "",
                          severity = "error", message = paste("Failed to generate data preview:", e$message))
    cat("Error generating data preview:", e$message, "\n")
  })
  
  cat("\n")
}
```

```{r intelligent-data-categorization, eval=params$data_guide_mode, echo=FALSE, results='asis'}
# ========================================================================
# INTELLIGENT DATA CATEGORIZATION & PATTERN RECOGNITION
# ========================================================================

if (!is.null(df_raw) && nrow(df_raw) > 0) {
  cat("## Intelligent Data Categorization\n\n")
  
  tryCatch({
    column_analysis <- data.frame(
      column_name = colnames(df_raw),
      data_type = sapply(df_raw, function(x) class(x)[1]),
      non_missing_count = sapply(df_raw, function(x) sum(!is.na(x) & x != "")),
      unique_values = sapply(df_raw, function(x) length(unique(x[!is.na(x) & x != ""]))),
      sample_values = sapply(df_raw, function(x) {
        vals <- unique(x[!is.na(x) & x != ""])
        paste(head(vals, 3), collapse = ", ")
      }),
      stringsAsFactors = FALSE
    )
    
    column_analysis$completeness_rate <- round(column_analysis$non_missing_count / nrow(df_raw) * 100, 1)
    
    # Intelligent categorization
    column_analysis$inferred_category <- sapply(1:nrow(column_analysis), function(i) {
      col_name <- tolower(column_analysis$column_name[i])
      unique_vals <- column_analysis$unique_values[i]
      completeness <- column_analysis$completeness_rate[i]
      sample_vals <- column_analysis$sample_values[i]
      
      # Pattern-based categorization
      if (grepl("company|name|organization|firm", col_name)) {
        "Company Identifier"
      } else if (grepl("id|code|ref|key", col_name)) {
        "Reference/ID"
      } else if (grepl("sector|industry|type|category", col_name)) {
        "Business Classification"
      } else if (grepl("size|employee|revenue|turnover", col_name)) {
        "Company Demographics"
      } else if (grepl("score|rating|scres|up__|in__|do__", col_name)) {
        "Performance Score"
      } else if (grepl("date|time|timestamp|survey", col_name)) {
        "Temporal/Survey Meta"
      } else if (grepl("region|country|location|address", col_name)) {
        "Geographic"
      } else if (unique_vals <= 10 && completeness > 50) {
        "Categorical (Low Cardinality)"
      } else if (unique_vals > nrow(df_raw) * 0.8) {
        "High Uniqueness (Likely Identifier)"
      } else if (grepl("^[0-9.,-]+$", sample_vals)) {
        "Numerical Data"
      } else {
        "General Text/Mixed"
      }
    })
    
    # Data quality assessment for each column
    column_analysis$quality_flag <- sapply(1:nrow(column_analysis), function(i) {
      completeness <- column_analysis$completeness_rate[i]
      unique_vals <- column_analysis$unique_values[i]
      
      flags <- character(0)
      
      if (completeness < 50) flags <- c(flags, "High Missing")
      if (completeness < 20) flags <- c(flags, "Critical Missing")
      if (unique_vals == 1) flags <- c(flags, "No Variation")
      if (unique_vals == nrow(df_raw) && completeness > 90) flags <- c(flags, "All Unique")
      
      if (length(flags) == 0) "OK" else paste(flags, collapse = ", ")
    })
    
    cat("**Column Categorization Results:**\n\n")
    
    if ("knitr" %in% loaded_packages) {
      display_analysis <- column_analysis[, c("column_name", "inferred_category", "completeness_rate", "unique_values", "quality_flag")]
      colnames(display_analysis) <- c("Column", "Inferred Category", "Completeness %", "Unique Values", "Quality Flags")
      print(knitr::kable(display_analysis, format = "markdown", align = c("l", "l", "r", "r", "l")))
    } else {
      print(column_analysis)
    }
    
    # Summary by category
    cat("\n**Data Categories Summary:**\n")
    category_counts <- table(column_analysis$inferred_category)
    for (cat_name in names(category_counts)) {
      cat("- **", cat_name, ":** ", category_counts[cat_name], " columns\n", sep = "")
    }
    
    # Quality issues summary
    problem_columns <- column_analysis[column_analysis$quality_flag != "OK", ]
    if (nrow(problem_columns) > 0) {
      cat("\n**Data Quality Issues Detected:**\n")
      for (i in 1:nrow(problem_columns)) {
        add_validation_message(field = problem_columns$column_name[i], 
                              rule = "data_quality_check", 
                              value = problem_columns$quality_flag[i],
                              severity = if(grepl("Critical", problem_columns$quality_flag[i])) "error" else "warning",
                              message = paste("Column quality issue:", problem_columns$quality_flag[i]))
        cat("- **", problem_columns$column_name[i], ":** ", problem_columns$quality_flag[i], "\n", sep = "")
      }
    } else {
      cat("\n**Data Quality:** No major issues detected ✅\n")
    }
    
  }, error = function(e) {
    add_validation_message(field = "categorization", rule = "column_analysis", value = "",
                          severity = "error", message = paste("Column categorization failed:", e$message))
    cat("Error in data categorization:", e$message, "\n")
  })
  
  cat("\n")
}
```

```{r company-extraction-and-matching, eval=params$data_guide_mode, echo=FALSE, results='asis'}
# ========================================================================
# COMPANY EXTRACTION & INTELLIGENT MATCHING
# ========================================================================

if (!is.null(df_raw) && nrow(df_raw) > 0) {
  cat("## Company Extraction & Matching Analysis\n\n")
  
  target_company <- params$company
  company_data <- NULL
  
  tryCatch({
    cat("**Target Company:** ", target_company, "\n\n")
    
    # Identify potential company name columns
    colnames_lower <- tolower(colnames(df_raw))
    company_col_candidates <- colnames(df_raw)[grepl("company|name|organization|firm", colnames_lower)]
    
    cat("**Company Name Column Detection:**\n")
    if (length(company_col_candidates) == 0) {
      add_validation_message(field = "company_column", rule = "company_col_exists", value = "none",
                            severity = "error", message = "No company name columns found")
      cat("- **Status:** No company name columns detected ❌\n")
      cat("- **Available columns:** ", paste(head(colnames(df_raw), 10), collapse = ", "), 
          if(ncol(df_raw) > 10) "..." else "", "\n")
    } else {
      cat("- **Candidates found:** ", length(company_col_candidates), " columns\n")
      cat("- **Columns:** ", paste(company_col_candidates, collapse = ", "), "\n")
      
      # Use the first/best candidate
      company_col <- company_col_candidates[1]
      cat("- **Selected column:** ", company_col, " ✅\n")
      
      # Analyze company data in this column
      company_names <- df_raw[[company_col]]
      unique_companies <- unique(company_names[!is.na(company_names) & company_names != ""])
      
      cat("- **Total companies in dataset:** ", length(unique_companies), "\n")
      
      # Company matching attempts
      cat("\n**Company Matching Process:**\n")
      
      # Exact match
      exact_matches <- which(tolower(trimws(company_names)) == tolower(trimws(target_company)))
      if (length(exact_matches) > 0) {
        cat("- **Exact match:** Found ", length(exact_matches), " match(es) ✅\n")
        company_data <- df_raw[exact_matches[1], , drop = FALSE]
        match_type <- "exact"
      } else {
        cat("- **Exact match:** Not found\n")
        
        # Partial match
        partial_matches <- which(grepl(tolower(trimws(target_company)), tolower(trimws(company_names)), fixed = TRUE))
        if (length(partial_matches) > 0) {
          cat("- **Partial match:** Found ", length(partial_matches), " match(es) ⚠️\n")
          cat("  - Matches: ", paste(head(company_names[partial_matches], 5), collapse = ", "), "\n")
          company_data <- df_raw[partial_matches[1], , drop = FALSE]
          match_type <- "partial"
          
          add_validation_message(field = "company_matching", rule = "exact_match", value = target_company,
                                severity = "warning", message = "Using partial match instead of exact match")
        } else {
          cat("- **Partial match:** Not found\n")
          match_type <- "none"
          
          add_validation_message(field = "company_matching", rule = "company_found", value = target_company,
                                severity = "error", message = "Target company not found in dataset")
        }
      }
      
      # Show available companies if no match
      if (match_type == "none") {
        cat("\n**Available Companies (sample):**\n")
        sample_companies <- head(unique_companies[order(unique_companies)], 10)
        for (i in seq_along(sample_companies)) {
          cat(sprintf("  %2d. %s\n", i, sample_companies[i]))
        }
        if (length(unique_companies) > 10) {
          cat("  ... and ", length(unique_companies) - 10, " more companies\n")
        }
      }
    }
    
  }, error = function(e) {
    add_validation_message(field = "company_extraction", rule = "extraction_process", value = "",
                          severity = "error", message = paste("Company extraction failed:", e$message))
    cat("Error in company extraction:", e$message, "\n")
  })
  
  cat("\n")
}
```

```{r extracted-company-analysis, eval=params$data_guide_mode, echo=FALSE, results='asis'}
# ========================================================================
# EXTRACTED COMPANY DATA ANALYSIS
# ========================================================================

if (!is.null(company_data) && nrow(company_data) > 0) {
  cat("## Extracted Company Data Analysis\n\n")
  
  tryCatch({
    cat("**Successfully extracted company data:**\n")
    cat("- **Company found:** ", company_data[[company_col]][1], " ✅\n")
    cat("- **Match type:** ", match_type, "\n")
    cat("- **Data completeness analysis:**\n")
    
    # Analyze data completeness for this company
    company_completeness <- data.frame(
      field = colnames(company_data),
      value = as.character(unlist(company_data[1, ])),
      has_data = !is.na(unlist(company_data[1, ])) & unlist(company_data[1, ]) != "",
      stringsAsFactors = FALSE
    )
    
    company_completeness$category <- sapply(company_completeness$field, function(x) {
      col_name <- tolower(x)
      if (grepl("company|name", col_name)) "Identification"
      else if (grepl("sector|industry", col_name)) "Business Info"
      else if (grepl("size|employee", col_name)) "Company Size"
      else if (grepl("score|rating|up__|in__|do__", col_name)) "Performance Scores"
      else if (grepl("date|time", col_name)) "Survey Meta"
      else "Other"
    })
    
    # Score-specific analysis
    score_fields <- company_completeness[company_completeness$category == "Performance Scores", ]
    if (nrow(score_fields) > 0) {
      cat("\n**Performance Score Analysis:**\n")
      cat("- **Total score fields:** ", nrow(score_fields), "\n")
      cat("- **Fields with data:** ", sum(score_fields$has_data), "\n")
      cat("- **Completeness rate:** ", round(sum(score_fields$has_data) / nrow(score_fields) * 100, 1), "%\n")
      
      # Test score conversion
      numeric_scores <- 0
      conversion_issues <- character(0)
      
      for (i in 1:nrow(score_fields)) {
        field_val <- score_fields$value[i]
        if (score_fields$has_data[i]) {
          # Try converting to numeric
          num_val <- suppressWarnings(as.numeric(gsub(",", ".", field_val)))
          if (!is.na(num_val)) {
            numeric_scores <- numeric_scores + 1
            # Check if reasonable score range
            if (num_val < 0 || num_val > 10) {
              add_validation_message(row = 1, field = score_fields$field[i], 
                                   rule = "score_range_0_10", value = num_val,
                                   severity = "warning", 
                                   message = "Score outside typical 0-10 range")
              conversion_issues <- c(conversion_issues, paste(score_fields$field[i], "=", num_val))
            }
          } else {
            add_validation_message(row = 1, field = score_fields$field[i], 
                                 rule = "numeric_conversion", value = field_val,
                                 severity = "error", 
                                 message = "Cannot convert score to numeric")
            conversion_issues <- c(conversion_issues, paste(score_fields$field[i], "non-numeric"))
          }
        }
      }
      
      cat("- **Convertible to numeric:** ", numeric_scores, "/", sum(score_fields$has_data), "\n")
      if (length(conversion_issues) > 0) {
        cat("- **Conversion issues:** ", paste(head(conversion_issues, 3), collapse = ", "), 
            if(length(conversion_issues) > 3) "..." else "", "\n")
      }
    }
    
    # Show sample of company data
    if ("knitr" %in% loaded_packages) {
      cat("\n**Sample Company Data:**\n\n")
      sample_data <- company_completeness[company_completeness$has_data, c("field", "value", "category")]
      sample_data <- head(sample_data, 15)  # Show first 15 fields with data
      colnames(sample_data) <- c("Field", "Value", "Category")
      print(knitr::kable(sample_data, format = "markdown"))
      
      if (nrow(company_completeness[company_completeness$has_data, ]) > 15) {
        cat("\n*... and ", nrow(company_completeness[company_completeness$has_data, ]) - 15, " more fields with data*\n")
      }
    }
    
  }, error = function(e) {
    add_validation_message(field = "company_analysis", rule = "data_analysis", value = "",
                          severity = "error", message = paste("Company data analysis failed:", e$message))
    cat("Error analyzing company data:", e$message, "\n")
  })
  
  cat("\n")
} else if (!is.null(df_raw) && nrow(df_raw) > 0) {
  cat("## Company Data Extraction\n\n")
  cat("**⚠️ No company data extracted - see matching issues above**\n\n")
}
```

```{r final-validation-summary, eval=params$data_guide_mode, echo=FALSE, results='asis'}
# ========================================================================
# FINAL VALIDATION SUMMARY (USER STORY FORMAT)
# ========================================================================

cat("## Final Validation Summary\n\n")

tryCatch({
  cat("**Validation Statistics:**\n")
  cat("- **Rows checked:** ", validation_results$rows_checked, "\n")
  cat("- **Errors:** ", validation_results$errors, "\n") 
  cat("- **Warnings:** ", validation_results$warnings, "\n")
  cat("- **Info messages:** ", validation_results$info_messages, "\n")
  cat("- **Total issues:** ", length(validation_results$detailed_messages), "\n")
  
  # Show detailed validation messages if any exist
  if (length(validation_results$detailed_messages) > 0) {
    cat("\n**Detailed Validation Messages:**\n\n")
    
    if ("knitr" %in% loaded_packages) {
      # Create detailed messages table
      messages_df <- do.call(rbind, lapply(validation_results$detailed_messages, function(x) {
        data.frame(
          Row = x$row,
          Field = x$field,
          Rule = x$rule,
          Value = substr(x$value, 1, 30), # Truncate long values
          Severity = x$severity,
          Message = substr(x$message, 1, 50), # Truncate long messages
          stringsAsFactors = FALSE
        )
      }))
      
      # Truncate table to max 50 rows
      if (nrow(messages_df) > 50) {
        display_messages <- head(messages_df, 50)
        cat("*Showing first 50 of ", nrow(messages_df), " validation messages*\n\n")
      } else {
        display_messages <- messages_df
      }
      
      print(knitr::kable(display_messages, format = "markdown", align = c("r", "l", "l", "l", "c", "l")))
      
    } else {
      # Fallback text format
      for (i in seq_along(validation_results$detailed_messages)) {
        msg <- validation_results$detailed_messages[[i]]
        cat(sprintf("- Row %s | %s | %s | Value: %s | %s\n", 
                   msg$row, msg$field, msg$rule, substr(msg$value, 1, 20), msg$severity))
        if (i >= 20) {
          cat("... and ", length(validation_results$detailed_messages) - 20, " more messages\n")
          break
        }
      }
    }
    
  } else {
    cat("\n**✅ No validation issues detected**\n")
  }
  
  # Overall status assessment
  cat("\n**Overall Data Quality Assessment:**\n")
  
  if (is.null(df_raw)) {
    cat("- **Status:** ❌ **DATA LOADING FAILED** - No analysis possible\n")
    cat("- **Action required:** Check file path and format\n")
  } else if (validation_results$errors > 0) {
    cat("- **Status:** ⚠️ **ERRORS DETECTED** - Data available but with critical issues\n")
    cat("- **Action required:** Review and fix error conditions before proceeding\n")
  } else if (validation_results$warnings > 0) {
    cat("- **Status:** ⚠️ **WARNINGS PRESENT** - Data usable but with minor issues\n")
    cat("- **Action required:** Review warnings for potential improvements\n")
  } else {
    cat("- **Status:** ✅ **DATA QUALITY GOOD** - Ready for analysis\n")
    cat("- **Action required:** None - proceed with report generation\n")
  }
  
  # Store validation results globally
  assign("validation_results", validation_results, envir = .GlobalEnv)
  assign("df_raw_validated", df_raw, envir = .GlobalEnv)
  if (!is.null(company_data)) {
    assign("company_data_extracted", company_data, envir = .GlobalEnv)
  }
  
}, error = function(e) {
  cat("⚠️ **Error generating validation summary:** ", e$message, "\n")
})

cat("\n---\n")
cat("*End of Validation Debug Summary*\n")
```