# PART 3 - DEMO: Resilience Dashboard Capabilities Testing

```{r demo-data-generation, eval=params$diagnostic_mode, echo=FALSE}
# ========================================================================
# SYNTHETIC RESILIENCE DATA GENERATION
# ========================================================================
# Generate realistic sample companies as if loaded from CSV

cat("=== DEMO MODE: GENERATING SYNTHETIC RESILIENCE DATA ===\n")

# Create realistic sample companies with diverse profiles
create_sample_resilience_data <- function() {
  
  # Define 5 sample companies with different characteristics
  companies <- data.frame(
    company_name = c(
      "GlobalLogistics Corp",
      "Regional Express Ltd", 
      "AgileStart Delivery",
      "Traditional Freight Co",
      "TechEnabled Supply"
    ),
    sector = c(
      "International Logistics",
      "Regional Transport", 
      "Last-Mile Delivery",
      "Freight & Warehousing",
      "Supply Chain Technology"
    ),
    size_number_of_employees = c(
      "10,000+",
      "1,000-4,999", 
      "50-249",
      "5,000-9,999",
      "250-999"
    ),
    stringsAsFactors = FALSE
  )
  
  # Generate realistic resilience scores with different patterns
  
  # Company 1: High performer - excellent across all dimensions  
  companies[1, c("up__r", "up__c", "up__f", "up__v", "up__a")] <- c(4.3, 4.5, 4.2, 4.4, 4.1)
  companies[1, c("in__r", "in__c", "in__f", "in__v", "in__a")] <- c(4.4, 4.3, 4.5, 4.6, 4.2)
  companies[1, c("do__r", "do__c", "do__f", "do__v", "do__a")] <- c(4.2, 4.4, 4.1, 4.5, 4.3)
  companies[1, "overall_scres"] <- 4.33
  
  # Company 2: Good performer - solid but with some gaps
  companies[2, c("up__r", "up__c", "up__f", "up__v", "up__a")] <- c(3.7, 3.2, 3.6, 3.8, 3.5)
  companies[2, c("in__r", "in__c", "in__f", "in__v", "in__a")] <- c(3.8, 3.6, 3.4, 3.9, 3.7)
  companies[2, c("do__r", "do__c", "do__f", "do__v", "do__a")] <- c(3.5, 3.7, 3.3, 3.6, 3.4)
  companies[2, "overall_scres"] <- 3.59
  
  # Company 3: Agile startup - high flexibility/agility, lower redundancy
  companies[3, c("up__r", "up__c", "up__f", "up__v", "up__a")] <- c(2.2, 3.6, 4.1, 3.1, 4.3)
  companies[3, c("in__r", "in__c", "in__f", "in__v", "in__a")] <- c(2.4, 3.3, 4.2, 3.4, 4.4)
  companies[3, c("do__r", "do__c", "do__f", "do__v", "do__a")] <- c(2.1, 3.9, 4.0, 3.6, 4.2)
  companies[3, "overall_scres"] <- 3.35
  
  # Company 4: Traditional company - average performance, lower tech
  companies[4, c("up__r", "up__c", "up__f", "up__v", "up__a")] <- c(3.1, 2.7, 2.8, 2.6, 2.5)
  companies[4, c("in__r", "in__c", "in__f", "in__v", "in__a")] <- c(3.3, 2.9, 2.7, 2.8, 2.6)
  companies[4, c("do__r", "do__c", "do__f", "do__v", "do__a")] <- c(3.0, 2.8, 2.5, 2.7, 2.4)
  companies[4, "overall_scres"] <- 2.77
  
  # Company 5: Tech-enabled - high visibility/agility, moderate redundancy
  companies[5, c("up__r", "up__c", "up__f", "up__v", "up__a")] <- c(3.1, 3.9, 3.7, 4.5, 4.1)
  companies[5, c("in__r", "in__c", "in__f", "in__v", "in__a")] <- c(3.3, 4.0, 3.9, 4.6, 4.2)
  companies[5, c("do__r", "do__c", "do__f", "do__v", "do__a")] <- c(3.0, 4.1, 3.8, 4.4, 4.0)
  companies[5, "overall_scres"] <- 3.81
  
  return(companies)
}

# Generate the sample data
tryCatch({
  sample_companies <- create_sample_resilience_data()
  cat("Successfully generated", nrow(sample_companies), "sample companies with complete resilience profiles\n")
}, error = function(e) {
  cat("ERROR: Failed to generate sample data:", e$message, "\n")
  sample_companies <<- NULL
})
```

```{r demo-radar-charts, eval=params$diagnostic_mode, echo=FALSE, fig.height=10, fig.width=14, results='asis'}
# ========================================================================
# DEMO: RADAR CHART VISUALIZATION TESTING
# ========================================================================

if (!is.null(sample_companies)) {
  cat("## Demo: Radar Chart Capabilities\n\n")
  
  tryCatch({
    if (!"fmsb" %in% loaded_packages) {
      cat("fmsb package not available - skipping radar charts\n\n")
    } else {
      cat("Testing radar chart generation with fmsb package...\n")
      
      # Set up for multiple radar charts
      par(mfrow = c(2, 3), mar = c(2, 2, 4, 2))
      
      dimension_labels <- c("Redundancy", "Collaboration", "Flexibility", "Visibility", "Agility")
      colors <- c("#e74c3c", "#0277BD", "#FF8F00", "#2E7D32", "#8E44AD")
      
      # Function to create radar data for fmsb (upstream pillar focus)
      create_radar_data_upstream <- function(company_row) {
        radar_data <- data.frame(
          Redundancy = c(5, 0, company_row$up__r),
          Collaboration = c(5, 0, company_row$up__c),
          Flexibility = c(5, 0, company_row$up__f),
          Visibility = c(5, 0, company_row$up__v),
          Agility = c(5, 0, company_row$up__a)
        )
        return(radar_data)
      }
      
      # Create radar chart for each company
      for (i in 1:min(5, nrow(sample_companies))) {
        company <- sample_companies[i, ]
        radar_data <- create_radar_data_upstream(company)
        
        # Create individual radar chart
        fmsb::radarchart(radar_data,
                         axistype = 2,
                         pcol = colors[i],
                         pfcol = scales::alpha(colors[i], 0.25),
                         plwd = 2.5,
                         cglcol = "grey70",
                         cglty = 1,
                         axislabcol = "grey40",
                         caxislabels = seq(0, 5, 1),
                         title = paste0(company$company_name, "\nUpstream Resilience"))
      }
      
      # Add empty plot for layout
      plot.new()
      
      # Reset plotting parameters
      par(mfrow = c(1, 1), mar = c(5, 4, 4, 2))
      
      cat("Radar charts generated successfully for", min(5, nrow(sample_companies)), "companies\n\n")
    }
    
  }, error = function(e) {
    par(mfrow = c(1, 1), mar = c(5, 4, 4, 2))  # Reset on error
    cat("ERROR: Radar chart generation failed:", e$message, "\n\n")
  })
}
```

```{r demo-pillar-comparison, eval=params$diagnostic_mode, echo=FALSE, fig.height=8, fig.width=12, results='asis'}
# ========================================================================
# DEMO: PILLAR COMPARISON CHARTS
# ========================================================================

if (!is.null(sample_companies)) {
  cat("## Demo: Pillar Performance Comparison\n\n")
  
  tryCatch({
    if (!"ggplot2" %in% loaded_packages) {
      cat("ggplot2 package not available - skipping pillar comparison\n\n")
    } else {
      cat("Testing pillar comparison visualization...\n")
      
      # Calculate pillar averages
      pillar_data <- sample_companies
      pillar_data$upstream_avg <- rowMeans(pillar_data[, c("up__r", "up__c", "up__f", "up__v", "up__a")], na.rm = TRUE)
      pillar_data$internal_avg <- rowMeans(pillar_data[, c("in__r", "in__c", "in__f", "in__v", "in__a")], na.rm = TRUE)
      pillar_data$downstream_avg <- rowMeans(pillar_data[, c("do__r", "do__c", "do__f", "do__v", "do__a")], na.rm = TRUE)
      
      # Reshape for plotting
      if ("tidyr" %in% loaded_packages) {
        library(tidyr)
        plot_data <- pillar_data %>%
          select(company_name, upstream_avg, internal_avg, downstream_avg) %>%
          pivot_longer(cols = c(upstream_avg, internal_avg, downstream_avg), 
                       names_to = "pillar", values_to = "score") %>%
          mutate(
            pillar = case_when(
              pillar == "upstream_avg" ~ "Upstream",
              pillar == "internal_avg" ~ "Internal",
              pillar == "downstream_avg" ~ "Downstream"
            ),
            pillar = factor(pillar, levels = c("Upstream", "Internal", "Downstream"))
          )
        
        # Create comparison plot
        p1 <- ggplot(plot_data, aes(x = pillar, y = score, fill = pillar)) +
          geom_col(alpha = 0.8, width = 0.7) +
          facet_wrap(~company_name, ncol = 3) +
          scale_fill_manual(values = c("Upstream" = "#0277BD", "Internal" = "#FF8F00", "Downstream" = "#2E7D32")) +
          scale_y_continuous(limits = c(0, 5), breaks = seq(0, 5, 1)) +
          theme_minimal() +
          theme(
            axis.text.x = element_text(angle = 45, hjust = 1, size = 10),
            legend.position = "bottom",
            strip.text = element_text(size = 11),
            panel.grid.minor = element_blank(),
            plot.title = element_text(size = 14, face = "bold")
          ) +
          labs(
            title = "Supply Chain Pillar Performance Comparison",
            subtitle = "Average resilience scores across operational pillars",
            x = "Operational Pillar",
            y = "Average Resilience Score",
            fill = "Pillar"
          )
        
        print(p1)
        cat("Pillar comparison chart generated successfully\n\n")
        
      } else {
        cat("tidyr package not available - using base R approach\n")
        # Fallback to simpler visualization without tidyr
        
        barplot(as.matrix(pillar_data[, c("upstream_avg", "internal_avg", "downstream_avg")]),
                beside = TRUE,
                main = "Pillar Performance Comparison (Fallback)",
                names.arg = c("Upstream", "Internal", "Downstream"),
                col = rainbow(nrow(pillar_data)),
                legend.text = pillar_data$company_name)
        
        cat("Fallback pillar comparison generated\n\n")
      }
    }
    
  }, error = function(e) {
    cat("ERROR: Pillar comparison failed:", e$message, "\n\n")
  })
}
```

```{r demo-dimension-heatmap, eval=params$diagnostic_mode, echo=FALSE, fig.height=8, fig.width=12, results='asis'}
# ========================================================================
# DEMO: DIMENSION HEATMAP VISUALIZATION
# ========================================================================

if (!is.null(sample_companies)) {
  cat("## Demo: Resilience Dimension Heatmap\n\n")
  
  tryCatch({
    if (!"ggplot2" %in% loaded_packages || !"tidyr" %in% loaded_packages) {
      cat("Required packages (ggplot2, tidyr) not available - skipping heatmap\n\n")
    } else {
      cat("Testing dimension heatmap visualization...\n")
      
      # Prepare heatmap data
      dimension_cols <- c("up__r", "up__c", "up__f", "up__v", "up__a",
                         "in__r", "in__c", "in__f", "in__v", "in__a",
                         "do__r", "do__c", "do__f", "do__v", "do__a")
      
      heatmap_data <- sample_companies %>%
        select(company_name, all_of(dimension_cols)) %>%
        pivot_longer(cols = -company_name, names_to = "dimension", values_to = "score") %>%
        mutate(
          pillar = case_when(
            grepl("^up__", dimension) ~ "Upstream",
            grepl("^in__", dimension) ~ "Internal", 
            grepl("^do__", dimension) ~ "Downstream"
          ),
          dim_type = case_when(
            grepl("__r$", dimension) ~ "Redundancy",
            grepl("__c$", dimension) ~ "Collaboration",
            grepl("__f$", dimension) ~ "Flexibility",
            grepl("__v$", dimension) ~ "Visibility",
            grepl("__a$", dimension) ~ "Agility"
          )
        )
      
      # Create heatmap
      p2 <- ggplot(heatmap_data, aes(x = dim_type, y = company_name, fill = score)) +
        geom_tile(color = "white", size = 0.8) +
        facet_wrap(~pillar, ncol = 3) +
        scale_fill_gradient2(low = "#e74c3c", mid = "#f39c12", high = "#27ae60",
                            midpoint = 2.5, limits = c(0, 5),
                            name = "Resilience\nScore") +
        theme_minimal() +
        theme(
          axis.text.x = element_text(angle = 45, hjust = 1, size = 10),
          axis.text.y = element_text(size = 10),
          strip.text = element_text(size = 12, face = "bold"),
          panel.grid = element_blank(),
          plot.title = element_text(size = 14, face = "bold")
        ) +
        labs(
          title = "Resilience Dimension Heatmap Analysis",
          subtitle = "Performance across all 15 resilience dimensions",
          x = "Resilience Dimension",
          y = "Company"
        )
      
      print(p2)
      cat("Dimension heatmap generated successfully\n\n")
    }
    
  }, error = function(e) {
    cat("ERROR: Heatmap generation failed:", e$message, "\n\n")
  })
}
```

```{r demo-overall-ranking, eval=params$diagnostic_mode, echo=FALSE, fig.height=6, fig.width=10, results='asis'}
# ========================================================================
# DEMO: OVERALL RANKING VISUALIZATION
# ========================================================================

if (!is.null(sample_companies)) {
  cat("## Demo: Overall Resilience Ranking\n\n")
  
  tryCatch({
    if (!"ggplot2" %in% loaded_packages) {
      cat("ggplot2 package not available - skipping ranking chart\n\n")
    } else {
      cat("Testing overall ranking visualization...\n")
      
      # Create ranking data
      ranking_data <- sample_companies %>%
        select(company_name, sector, overall_scres) %>%
        arrange(desc(overall_scres)) %>%
        mutate(
          rank = row_number(),
          performance_level = case_when(
            overall_scres >= 4.0 ~ "Excellent",
            overall_scres >= 3.5 ~ "Good",
            overall_scres >= 3.0 ~ "Average", 
            overall_scres >= 2.5 ~ "Below Average",
            TRUE ~ "Poor"
          ),
          performance_level = factor(performance_level, 
                                   levels = c("Poor", "Below Average", "Average", "Good", "Excellent"))
        )
      
      # Create ranking plot
      p3 <- ggplot(ranking_data, aes(x = reorder(company_name, overall_scres), y = overall_scres, fill = performance_level)) +
        geom_col(alpha = 0.85, width = 0.7) +
        geom_text(aes(label = round(overall_scres, 2)), hjust = -0.1, size = 4, fontface = "bold") +
        scale_fill_manual(values = c("Poor" = "#e74c3c", "Below Average" = "#e67e22",
                                    "Average" = "#f39c12", "Good" = "#2ecc71", "Excellent" = "#27ae60")) +
        scale_y_continuous(limits = c(0, 5), breaks = seq(0, 5, 1)) +
        coord_flip() +
        theme_minimal() +
        theme(
          legend.position = "bottom",
          panel.grid.minor = element_blank(),
          axis.text.y = element_text(size = 11),
          plot.title = element_text(size = 14, face = "bold")
        ) +
        labs(
          title = "Overall Supply Chain Resilience Score (SCRES) Ranking",
          subtitle = "Companies ranked by comprehensive resilience performance",
          x = "Company",
          y = "Overall Resilience Score (SCRES)",
          fill = "Performance Level"
        )
      
      print(p3)
      cat("Overall ranking chart generated successfully\n\n")
    }
    
  }, error = function(e) {
    cat("ERROR: Ranking visualization failed:", e$message, "\n\n")
  })
}
```

```{r demo-summary-table, eval=params$diagnostic_mode, echo=FALSE, results='asis'}
# ========================================================================
# DEMO: DATA SUMMARY TABLE
# ========================================================================

if (!is.null(sample_companies)) {
  cat("## Demo: Sample Data Summary\n\n")
  
  tryCatch({
    if (!"knitr" %in% loaded_packages) {
      cat("knitr package not available - showing basic summary\n")
      print(sample_companies[, c("company_name", "sector", "overall_scres")])
    } else {
      cat("Testing table generation capabilities...\n")
      
      # Create summary table
      summary_table <- sample_companies %>%
        select(company_name, sector, size_number_of_employees, overall_scres) %>%
        mutate(
          overall_scres = round(overall_scres, 2),
          performance_level = case_when(
            overall_scres >= 4.0 ~ "Excellent",
            overall_scres >= 3.5 ~ "Good",
            overall_scres >= 3.0 ~ "Average",
            overall_scres >= 2.5 ~ "Below Average", 
            TRUE ~ "Poor"
          )
        ) %>%
        arrange(desc(overall_scres))
      
      print(knitr::kable(summary_table,
                        col.names = c("Company", "Sector", "Size", "SCRES", "Performance Level"),
                        format = "markdown",
                        align = c("l", "l", "l", "c", "c")))
      
      cat("\n**Demo Visualization Summary:**\n")
      cat("- Successfully tested", length(loaded_packages), "loaded packages\n")  
      cat("- Generated", nrow(sample_companies), "sample companies with realistic resilience profiles\n")
      cat("- Demonstrated radar charts, pillar comparisons, heatmaps, and ranking visualizations\n")
      cat("- All visualization components working with robust error handling\n\n")
      
      cat("**System Status:** Dashboard visualization capabilities fully operational\n\n")
    }
    
  }, error = function(e) {
    cat("ERROR: Summary table generation failed:", e$message, "\n\n")
  })
}
```